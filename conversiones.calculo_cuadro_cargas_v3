
CREATE OR REPLACE PROCEDURE conversiones.calculo_cuadro_cargas_v3(
	IN cantidad integer,
	IN id_producto integer,
	IN v_usuario character varying,
	IN id_carga integer,
	IN voltaje integer,
	IN v_tipo_tuberia character varying,
	IN v_conductor character varying,
	IN v_longitud integer,
	IN fp double precision)
LANGUAGE 'plpgsql'
AS $BODY$

DECLARE
	d	   record;
	v_potencia   numeric; 
	v_calibre character varying;
	v_tierra character varying;     
	v_corriente real;
	v_proteccion float;
	factor_proteccion  float;
	v_conduit float;
	v_porcent_regula real;
	redondeo real;
	v_intensidad_nominal character varying;
	v_mensaje  character varying;
    v_num_circuito  numeric;
	

BEGIN
/* insertamos lo actual conversiones.tabla1 en una tabla de log*/
  execute ('insert into conversiones.tabla1hist 
  (idconv_historico
	,descripcion
	, und
	, cantidad
	, va
	, potencia
	, voltaje
	, corriente
	, proteccion 
	, breaker 
	, fase 
	,neutro
	, tierra 
	, conduit 
	, conductor 
	, porcentaje_regula	   
	, longitud
	, usuario_ejec_original
	, usuario_borrado
	, fecha_eje_original
	, fecha_borrado) 
		      select 
				idconv
				,descripcion
				, und, cantidad
				, va, potencia
				, voltaje
				, corriente
				, proteccion 
				, breaker 
				, fase 
				, neutro
				, tierra 
				, conduit 
				, conductor 
		        , porcentaje_regula
				, longitud
				, usuario
				,'''|| v_usuario ||'''
				, fecha
				, cast(substring(current_timestamp::text,1,19)as timestamp)
		      from conversiones.tabla1
		      where idconv != '''|| id_carga ||'''');
/* Borramos la table donde se almacena cantidad y productos*/
  execute ('Delete from conversiones.tabla1 where idconv != '''|| id_carga ||'''');
  
   --logica factor de proteccion de motor =700
	if id_producto = 4 then
        factor_proteccion :=7;
	else
	    factor_proteccion :=1.25;
	end if;

--traer los productos y los watts relacionados
	FOR d in 
 		
        select p.descripcion,
			     p.unmed ,
			     f.va 
			from productos.productos p, 
				 parametricas.fichatec_watts f
			where p.id=f.id		
			and	  p.id in (id_producto) LOOP
			

	--Calculos base	
	v_potencia  :=(cantidad*d.va);	
	v_corriente :=((cantidad*d.va)/voltaje);
	v_proteccion :=(((cantidad*d.va)/voltaje)*factor_proteccion);

	--LLamado a funcion logica BREAKER
    select conversiones.calculo_breaker_v1 (v_proteccion, voltaje)
           into v_intensidad_nominal;
  --  call conversiones.calculo_breaker(v_proteccion, voltaje);

 --logica de calibre cable	
 
	  select calibre_awg 
			into v_calibre
		from parametricas.calibres_de_cables
		where twg60ยบ >= ceiling(v_proteccion)
		and calibre_awg <>'14'--por regulacion no puede ser calibre 14
		limit 1;
        
  --logica  tierra
   select case 
            when UPPER(v_conductor)='CU' then kcmil_cobre
            when UPPER(v_conductor)='AL' then kcmil_alum
         else 0   
         end
		into v_tierra
		from parametricas.tabla_tierra
		where proteccion>= ceiling(v_proteccion)
		limit 1;

--llamado a funcion de calculo de zeficaz
    select  conversiones.z_eficas_cobre_o_aluminio(v_calibre,v_tipo_tuberia, fp)
           into v_conduit;
           
--calculo de regulacion	de tension
	v_porcent_regula :=((((v_conduit*(v_longitud*0.001000))*(v_potencia/voltaje)))/voltaje)*100;--%

  
	insert into conversiones.tabla1 Values
	(CAST(id_carga as integer)
	, d.descripcion
	, d.unmed
	, cantidad
	, d.va --watts
	, v_potencia--potencia
	, voltaje --voltaje
	, v_corriente --corriente
	, factor_proteccion
	, v_proteccion --proteccion
	, case 
	 	when v_intensidad_nominal like '%Out%' then v_intensidad_nominal
	    else '1X'||v_intensidad_nominal||'A' --breaker
	  end
	, v_calibre--fase
	, v_calibre--neutro
	, v_tierra--tierra
	, v_tipo_tuberia--conduit
	, v_conductor --conducor
	, v_porcent_regula --%de regulacion
	, v_longitud --longitud
	, v_usuario --usuario
	, cast(substring(current_timestamp::text,1,19)as timestamp));--fech y hora;

	END LOOP;
	
END;
$BODY$;